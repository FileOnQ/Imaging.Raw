name: Benchmark

on:
  pull_request_target:
    branches: [ main ]
    types: [ opened ]
  issue_comment:
    types: [ created ]

jobs:
  check-command:
    runs-on: windows-2019
    permissions:
      pull-requests: write
    outputs:
      benchmark: ${{ steps.check.outputs.triggered }}
      ref: ${{ env.CUSTOM_REF }}
      repo: ${{ env.CUSTOM_REPO }}
    steps:
    - name: Print Event Name
      run: echo "${{ github.EVENT_NAME }}"

    - name: Check Benchmark Trigger
      if: ${{ github.EVENT_NAME != 'pull_request_target' }}
      uses: khan/pull-request-comment-trigger@master
      id: check
      with:
          trigger: '/benchmark'
          reaction: eyes
      env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

    - name: Find Branch
      uses: actions/github-script@v3
      id: find-branch
      with:
        script: |
          const request = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          }
          core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
          try {
            const result = await github.pulls.get(request)
            return result.data
          } catch (err) {
            core.setFailed(`Request failed with error ${err}`)
          }
    - name: Set Repository and Ref
      run: |
        $repository = '${{ fromJSON(steps.find-branch.outputs.result).head.repo.full_name }}'
        $ref = '${{ fromJSON(steps.find-branch.outputs.result).head.ref }}'
        echo "CUSTOM_REPO=$($repository)" >> $env:GITHUB_ENV
        echo "CUSTOM_REF=$($ref)" >> $env:GITHUB_ENV

  benchmark-build:
   if: ${{ needs.check-command.outputs.benchmark == 'true' || github.EVENT_NAME == 'pull_request_target' }}
   needs: check-command
   runs-on: windows-2019
   outputs:
     repo: ${{ needs.check-command.outputs.repo }}
     ref: ${{ needs.check-command.outputs.ref }}
     package_version: ${{ env.PACKAGE_VERSION }}
   steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ needs.check-command.outputs.repo }}
        submodules: 'true'
        ref: ${{ needs.check-command.outputs.ref }}

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
      shell: powershell
      run: .\build\cuda.ps1

    - name: Check NVCC
      shell: powershell
      run: |
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include

    - name: Ensure .NET 5 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.302

    - name: Ensure .NET 6 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.101

    - name: Setup NuGet.exe
      uses: NuGet/setup-nuget@v1.0.5
      with:
        nuget-version: 5.x
    
    - name: Set NuGet Version
      run: echo "PACKAGE_VERSION=1.0.0-benchmark.${{ GITHUB.RUN_NUMBER }}" >> $env:GITHUB_ENV

    - name: Build
      run: dotnet build -c Release
      working-directory: ./src/FileOnQ.Imaging.Raw/

    - name: Pack
      run: dotnet pack -c Release -o ../../ /p:ContinuousIntegrationBuild=true /p:Version=${{ env.PACKAGE_VERSION }} /p:PackageVersion=${{ env.PACKAGE_VERSION }}
      working-directory: ./src/FileOnQ.Imaging.Raw

    - name: Benchmark
      run: dotnet run -c Release -b ${{ matrix.benchmark }}
      working-directory: ./benchmarks/tools
    
    - name: Upload NuGet Package
      uses: actions/upload-artifact@v2
      with:
        name: Benchmark-Packages
        path: |
          *.nupkg
          *.snupkg
  benchmark-run:
   if: ${{ needs.check-command.outputs.benchmark == 'true' || github.EVENT_NAME == 'pull_request' }}
   needs: benchmark-build
   runs-on: ${{ matrix.os }}
   outputs:
    repo: ${{ needs.benchmark-build.outputs.repo }}
    ref: ${{ needs.benchmark-build.outputs.ref }}
   strategy:
      matrix:
        include:
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'thumbnail'
            framework: 'net48'
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'thumbnail'
            framework: 'net5.0'
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'thumbnail'
            framework: 'net6.0'
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'dcraw'
            framework: 'net48'
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'dcraw'
            framework: 'net5.0'
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'dcraw'
            framework: 'net6.0'            
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'dcraw-whitebalance'
            framework: 'net48'
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'dcraw-whitebalance'
            framework: 'net5.0'
          - os: windows-2019
            cuda: 'CUDA-11.4.0'
            visual_studio: 'Visual Studio 16 2019'
            benchmark: 'dcraw-whitebalance'
            framework: 'net6.0'
   steps:
    - name: Clone fileonq/imaging.heif
      uses: actions/checkout@v2
      with:
       repository: ${{ needs.benchmark-build.outputs.repo }}
       ref: ${{ needs.benchmark-build.outputs.ref }}
       submodules: 'true'
    - name: Ensure .NET 5 SDK
      uses: actions/setup-dotnet@v1
      with:
       dotnet-version: 5.0.302

    - name: Ensure .NET 6 SDK
      uses: actions/setup-dotnet@v1
      with:
       dotnet-version: 6.0.101
    - name: Download Artifacts
      uses: actions/download-artifact@v2

    - name: Copy Nupkg
      shell: powershell
      run: Copy-Item Benchmark-Packages\* -Destination .
    
    - name: Update NuGet
      run: dotnet add package FileOnQ.Imaging.Heif --version ${{ needs.benchmark-build.outputs.package_version }}
      working-directory: ./benchmarks/tools

    - name: Benchmark
      run: dotnet run -c Release -f ${{ matrix.framework }} -b ${{ matrix.benchmark }}
      working-directory: ./benchmarks/tools

    - name: Upload Results
      uses: actions/upload-artifact@v2
      with:
       name: Benchmark-${{ matrix.benchmark }}.${{ matrix.framework }}
       path: ./benchmarks/tools/BenchmarkDotNet.Artifacts/results
